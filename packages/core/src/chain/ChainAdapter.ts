import type {
  ZKProof,
  KeylessPublicKey,
  TransactionPayload,
  Transaction,
} from '../types/chain';

/**
 * Abstract interface for interacting with different blockchain networks.
 * Implementations will handle chain-specific transaction creation and proof verification.
 */
export interface ChainAdapter {
  /**
   * The identifier for this blockchain network (e.g., 'sui', 'aptos', 'ethereum').
   * Used internally to distinguish between different chain adapters.
   */
  readonly chainId: string;

  /**
   * Generates a chain-specific transaction object, embedding the ZKProof and
   * necessary public key information for keyless authentication.
   *
   * @param zkProof The zero-knowledge proof generated by the AuthProvider.
   * @param publicKey The KeylessPublicKey object associated with the account.
   * @param payload The transaction payload specific to the blockchain network.
   * @returns A Promise that resolves with a Transaction object, ready to be signed and sent to the blockchain.
   * @throws {ChainError} If transaction creation fails (e.g., invalid parameters, network error).
   */
  createTransaction(
    zkProof: ZKProof,
    publicKey: KeylessPublicKey,
    payload: TransactionPayload
  ): Promise<Transaction>;

  /**
   * (Optional for `@keyless/core`, might be implemented in a separate `@keyless/verifier` package)
   * Verifies the zero-knowledge proof against the blockchain's on-chain verifier contract (if applicable).
   * This is an example of client-side verification, actual on-chain verification will be chain-specific.
   *
   * @param zkProof The zero-knowledge proof to verify.
   * @param publicKey The KeylessPublicKey object associated with the account.
   * @returns A Promise that resolves to true if the proof is valid, false otherwise.
   * @throws {ChainError} If verification fails (e.g., invalid proof format, network error).
   */
  verifyProof?(zkProof: ZKProof, publicKey: KeylessPublicKey): Promise<boolean>; // Optional for core

  // ... potentially add methods for transaction signing, sending, etc. (for future phases)
}

/**
 * Abstract base class for ChainAdapter implementations.
 * Can contain common logic and helper methods for all ChainAdapters.
 */
export abstract class BaseChainAdapter implements ChainAdapter {
  abstract readonly chainId: string;
  abstract createTransaction(
    zkProof: ZKProof,
    publicKey: KeylessPublicKey,
    payload: TransactionPayload
  ): Promise<Transaction>;
  abstract verifyProof?(
    zkProof: ZKProof,
    publicKey: KeylessPublicKey
  ): Promise<boolean>; // Optional for core
}
